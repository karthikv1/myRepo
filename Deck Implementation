package Deck;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class DeckImpl<Item> implements Iterable<Item> {

	private Node first, last, current;
	private int N = 0;
	private class Node{
		Item item;
		Node next;
	}
	
	public DeckImpl(){
		if(isEmpty()){
			Node first = new Node();
			first = last;
			++N;
		}
				
	}
	public boolean isEmpty(){
		return first==null;
	}
	
	public int size(){
		return N;
	}
	public void addFirst(Item item) throws NullPointerException{
		if(item == null) throw new NullPointerException("cannot insert null item in deck");
		Node oldFirst = first;
		first = new Node();
		first.item = item;
		first.next = oldFirst;
		N++;
		
	}
	public void addLast(Item item) throws NullPointerException{
		if(item == null) throw new NullPointerException("cannot insert null item in deck");
		Node oldLast = last;
		last = new Node();
		last.item = item;
		last.next = oldLast;
		N++;
	}
	public Item removeFirst() throws NoSuchElementException{
		if(isEmpty()) throw new NoSuchElementException();
		Item item = first.item;
		first = first.next;
		--N;
		return item;
	}
	public Item removeLast() throws NoSuchElementException{
		if(isEmpty()) throw new NoSuchElementException();
		Item item = last.item;
		Node temp = first;
		while(first !=last){
			temp = temp.next;
		}
		last = null;
		last = temp;
		last.next = null;
		--N;
		return item;
	}
	@Override
	public Iterator<Item> iterator() {
		return new ListIterator();
	}
	private class ListIterator implements Iterator<Item>{
		private Node current;
		public boolean hasNext(){
			return current != null;
		}
		public Item next(){
			
			Item item = current.item;
			current = current.next;
			return item;
		}
		@Override
		public void remove() {
			// TODO Auto-generated method stub
			
		}
			
	}
	
	

}
