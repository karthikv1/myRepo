package quickSort;

public class QuickImpl {

	public static int partition(Comparable[] a, int lo, int hi){
		int i=lo, j = hi+1;
		while(true){
			while(less(a[++i],a[lo])<0)
				if(i==hi) break;
			while(less(a[lo],a[--j])<0)
				if(j==lo) break;
			if(i>=j) break;
			exch(a,i,j);
		}
		exch(a,lo,j);
		return j;
	}

	private static void exch(Comparable[] a, int i, int j) {
		Comparable temp = a[i];
		a[i] = a[j];
		a[j] = temp;
		
	}

	private static int less(Comparable a, Comparable a2) {
		if(a.compareTo(a2)<0)return -1;
		if(a.compareTo(a2)>0)return 1;
		return 0;
	}
	
	public static void sort(Comparable a[]){
		sort(a,0,a.length-1);
		
	}
	public static void sort(Comparable[] a,int lo, int hi){
		if(hi<=lo) return;
		int j=QuickImpl.partition(a, lo,hi);
		sort(a,lo,j);
		sort(a,j+1,hi);
	}
	@Override
	public int compareTo(Object arg0) {
		QuickMain temp = (QuickMain)arg0;
		if(this.val.compareTo((temp.val))<0)return -1;
		if(this.val.compareTo((temp.val))>0)return 1;
		return 0;
	}
}
